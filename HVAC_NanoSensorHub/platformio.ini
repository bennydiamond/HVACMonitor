; PlatformIO Project Configuration File for MiniCore
; https://github.com/MCUdude/MiniCore/
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed, and extra flags
;   Library options: dependencies, extra library storage
;   Advanced options: extra scripting
;
; Please visit the documentation for the other options
; https://github.com/MCUdude/MiniCore/blob/master/PlatformIO.md
; https://docs.platformio.org/page/projectconf.html


[platformio]
default_envs = Upload_UART ; Default build target


; Common settings for all environments
[env]
platform = atmelavr
framework = arduino

; TARGET SETTINGS
; Chip in use
board = ATmega168P
; Clock frequency in [Hz]
board_build.f_cpu = 16000000L

; BUILD OPTIONS
; Comment out to enable LTO (this line unflags it)
;build_unflags = -flto
; Extra build flags
build_flags = 
    -Wl,-Map,firmware.map
    -DSERIAL_RX_BUFFER_SIZE=16
    -DSERIAL_TX_BUFFER_SIZE=16
    -Os
    -ffunction-sections
    -fdata-sections
    -Wl,--gc-sections
    -Wl,--relax

; SERIAL MONITOR OPTIONS
; Serial monitor port defined in the Upload_UART environment
;monitor_port = ${env:Upload_UART.upload_port}
; Serial monitor baud rate
monitor_speed = 9600

lib_deps =
    sensirion/sensirion-sps
    sensirion/Sensirion I2C SCD30
    sensirion/Sensirion I2C SGP40


; Run the following command to upload with this environment
; pio run -e Upload_UART -t upload
[env:Upload_UART]
; Serial bootloader protocol
upload_protocol = urclock
upload_speed = 250000
; Serial upload port
;upload_port = /dev/ttyUSB0
; Set upload baudrate. Can be changed on the fly if using Urboot
board_upload.speed = ${env:fuses_bootloader.board_bootloader.speed}
build_flags = 
    -Wl,-Map,firmware.map
    -DSERIAL_RX_BUFFER_SIZE=16
    -DSERIAL_TX_BUFFER_SIZE=16
    -Os
    -ffunction-sections
    -fdata-sections
    -Wl,--gc-sections
    -Wl,--relax


; Run the following command to upload with this environment
; pio run -e Upload_ISP -t upload
[env:Upload_ISP]
; Custom upload procedure
upload_protocol = custom
; Avrdude upload flags
upload_flags =
  -C$PROJECT_PACKAGES_DIR/tool-avrdude/avrdude.conf
  -p$BOARD_MCU
  -PUSB
  -cusbasp
; Avrdude upload command
upload_command = avrdude $UPLOAD_FLAGS -U flash:w:$SOURCE:i


; Run the following command to set fuses
; pio run -e fuses_bootloader -t fuses
; Run the following command to set fuses + burn bootloader
; pio run -e fuses_bootloader -t bootloader
[env:fuses_bootloader]
board_hardware.oscillator = external ; Oscillator type
board_bootloader.type = urboot       ; urboot, optiboot or no_bootloader
board_bootloader.speed = 125000      ; Bootloader baud rate
board_hardware.uart = uart0          ; Set UART to use for serial upload
board_hardware.bod = 2.7v            ; Set brown-out detection
board_hardware.eesave = yes          ; Preserve EEPROM when uploading using programmer
upload_protocol = usbasp             ; Use the USBasp as programmer
upload_flags =                       ; Select USB as upload port and divide the SPI clock by 8
  -PUSB
  -B8

[env:nanoatmega168]
platform = atmelavr
board = nanoatmega168
framework = arduino
upload_speed = 115200
monitor_speed = 9600
board_upload.maximum_size = 15872

lib_deps =
    sensirion/sensirion-sps
    sensirion/Sensirion I2C SCD30
    sensirion/Sensirion I2C SGP40

[env:nano328p]
platform = atmelavr
board = nanoatmega328new
framework = arduino
upload_protocol = arduino
upload_speed = 115200
monitor_speed = 9600
build_flags = 
    -Os
    -ffunction-sections
    -fdata-sections
    -Wl,--gc-sections

lib_deps =
    sensirion/sensirion-sps
    sensirion/Sensirion I2C SCD30
    sensirion/Sensirion I2C SGP40